import React, { useState } from 'react';
import './SummaryDisplay.css';

interface SummaryData {
  summary: string;
  originalText: string;
  wordCount: {
    original: number;
    summary: number;
  };
  summaryLength: string;
  method?: string;
  processingTime?: number;
}

interface SummaryDisplayProps {
  data: SummaryData;
  onReset: () => void;
}

const SummaryDisplay: React.FC<SummaryDisplayProps> = ({ data, onReset }) => {
  const [copied, setCopied] = useState(false);
  const [showOriginal, setShowOriginal] = useState(false);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(data.summary);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const compressionRatio = Math.round(
    ((data.wordCount.original - data.wordCount.summary) / data.wordCount.original) * 100
  );

  const getCompressionColor = (ratio: number) => {
    if (ratio >= 80) return '#34a853';
    if (ratio >= 60) return '#fbbc04';
    return '#ea4335';
  };

  const formatSummaryLength = (length: string) => {
    return length.charAt(0).toUpperCase() + length.slice(1);
  };

  return (
    <div className="summary-container">
      <div className="summary-header">
        <div className="success-indicator">
          <div className="success-icon">✅</div>
          <div className="success-text">
            <h2>Summary Generated!</h2>
            <p>Your document has been processed with cosmic intelligence</p>
          </div>
        </div>
        <button onClick={onReset} className="new-document-button">
          <span className="button-icon">📄</span>
          New Document
        </button>
      </div>

      <div className="summary-stats">
        <div className="stat-card">
          <div className="stat-icon">📝</div>
          <div className="stat-content">
            <span className="stat-value">{data.wordCount.original.toLocaleString()}</span>
            <span className="stat-label">Original Words</span>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">✂️</div>
          <div className="stat-content">
            <span className="stat-value">{data.wordCount.summary.toLocaleString()}</span>
            <span className="stat-label">Summary Words</span>
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-icon">📊</div>
          <div className="stat-content">
            <span 
              className="stat-value" 
              style={{ color: getCompressionColor(compressionRatio) }}
            >
              {compressionRatio}%
            </span>
            <span className="stat-label">Compression</span>
          </div>
        </div>

        {/* <div className="stat-card">
          <div className="stat-icon">🧠</div>
          <div className="stat-content">
            <span className="stat-value">Nexus</span>
            <span className="stat-label">AI Model</span>
          </div>
        </div> */}
      </div>

      <div className="summary-content">
        <div className="content-header">
          <h3>
            <span className="content-icon">🧠</span>
            Cosmic Intelligence Summary
          </h3>
          <div className="content-actions">
            <button 
              onClick={copyToClipboard} 
              className={`copy-button ${copied ? 'copied' : ''}`}
            >
              <span className="button-icon">{copied ? '✅' : '📋'}</span>
              {copied ? 'Copied!' : 'Copy'}
            </button>
          </div>
        </div>

        <div className="summary-text">
          {data.summary}
        </div>

        <div className="gemini-signature">
          <span className="signature-icon">✨</span>
          <span>Generated by Cosmic Intelligence</span>
        </div>
      </div>

      <div className="original-section">
        <div className="original-header">
          <button 
            className="toggle-original"
            onClick={() => setShowOriginal(!showOriginal)}
          >
            <span className="toggle-icon">{showOriginal ? '🔽' : '▶️'}</span>
            <span>Original Text Preview</span>
            <span className="word-count">({data.wordCount.original} words)</span>
          </button>
        </div>

        {showOriginal && (
          <div className="original-text">
            {data.originalText}
          </div>
        )}
      </div>

      <div className="action-buttons">
        <button onClick={onReset} className="primary-button">
          <span className="button-icon">🔄</span>
          Process Another Document
        </button>

        <button 
          onClick={copyToClipboard}
          className="secondary-button"
        >
          <span className="button-icon">📱</span>
          Share Summary
        </button>
      </div>
    </div>
  );
};

export default SummaryDisplay;